// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: replica.proto

package protoReplicaV1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ResetIndexRequest struct {
	Database             string   `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	Shard                int32    `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Leader               int32    `protobuf:"varint,3,opt,name=leader,proto3" json:"leader,omitempty"`
	FamilyTime           int64    `protobuf:"varint,4,opt,name=familyTime,proto3" json:"familyTime,omitempty"`
	AppendIndex          int64    `protobuf:"varint,5,opt,name=appendIndex,proto3" json:"appendIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResetIndexRequest) Reset()         { *m = ResetIndexRequest{} }
func (m *ResetIndexRequest) String() string { return proto.CompactTextString(m) }
func (*ResetIndexRequest) ProtoMessage()    {}
func (*ResetIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e84aa831fb48ea1, []int{0}
}
func (m *ResetIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetIndexRequest.Merge(m, src)
}
func (m *ResetIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResetIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResetIndexRequest proto.InternalMessageInfo

func (m *ResetIndexRequest) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *ResetIndexRequest) GetShard() int32 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *ResetIndexRequest) GetLeader() int32 {
	if m != nil {
		return m.Leader
	}
	return 0
}

func (m *ResetIndexRequest) GetFamilyTime() int64 {
	if m != nil {
		return m.FamilyTime
	}
	return 0
}

func (m *ResetIndexRequest) GetAppendIndex() int64 {
	if m != nil {
		return m.AppendIndex
	}
	return 0
}

type ResetIndexResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResetIndexResponse) Reset()         { *m = ResetIndexResponse{} }
func (m *ResetIndexResponse) String() string { return proto.CompactTextString(m) }
func (*ResetIndexResponse) ProtoMessage()    {}
func (*ResetIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e84aa831fb48ea1, []int{1}
}
func (m *ResetIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResetIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResetIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResetIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetIndexResponse.Merge(m, src)
}
func (m *ResetIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *ResetIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResetIndexResponse proto.InternalMessageInfo

type GetReplicaAckIndexRequest struct {
	Database             string   `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	Shard                int32    `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Leader               int32    `protobuf:"varint,3,opt,name=leader,proto3" json:"leader,omitempty"`
	FamilyTime           int64    `protobuf:"varint,4,opt,name=familyTime,proto3" json:"familyTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReplicaAckIndexRequest) Reset()         { *m = GetReplicaAckIndexRequest{} }
func (m *GetReplicaAckIndexRequest) String() string { return proto.CompactTextString(m) }
func (*GetReplicaAckIndexRequest) ProtoMessage()    {}
func (*GetReplicaAckIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e84aa831fb48ea1, []int{2}
}
func (m *GetReplicaAckIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReplicaAckIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReplicaAckIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReplicaAckIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReplicaAckIndexRequest.Merge(m, src)
}
func (m *GetReplicaAckIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetReplicaAckIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReplicaAckIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReplicaAckIndexRequest proto.InternalMessageInfo

func (m *GetReplicaAckIndexRequest) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *GetReplicaAckIndexRequest) GetShard() int32 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *GetReplicaAckIndexRequest) GetLeader() int32 {
	if m != nil {
		return m.Leader
	}
	return 0
}

func (m *GetReplicaAckIndexRequest) GetFamilyTime() int64 {
	if m != nil {
		return m.FamilyTime
	}
	return 0
}

type GetReplicaAckIndexResponse struct {
	AckIndex             int64    `protobuf:"varint,5,opt,name=ackIndex,proto3" json:"ackIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReplicaAckIndexResponse) Reset()         { *m = GetReplicaAckIndexResponse{} }
func (m *GetReplicaAckIndexResponse) String() string { return proto.CompactTextString(m) }
func (*GetReplicaAckIndexResponse) ProtoMessage()    {}
func (*GetReplicaAckIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e84aa831fb48ea1, []int{3}
}
func (m *GetReplicaAckIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReplicaAckIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReplicaAckIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReplicaAckIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReplicaAckIndexResponse.Merge(m, src)
}
func (m *GetReplicaAckIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetReplicaAckIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReplicaAckIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetReplicaAckIndexResponse proto.InternalMessageInfo

func (m *GetReplicaAckIndexResponse) GetAckIndex() int64 {
	if m != nil {
		return m.AckIndex
	}
	return 0
}

type ReplicaRequest struct {
	ReplicaIndex         int64    `protobuf:"varint,4,opt,name=replicaIndex,proto3" json:"replicaIndex,omitempty"`
	Record               []byte   `protobuf:"bytes,5,opt,name=record,proto3" json:"record,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplicaRequest) Reset()         { *m = ReplicaRequest{} }
func (m *ReplicaRequest) String() string { return proto.CompactTextString(m) }
func (*ReplicaRequest) ProtoMessage()    {}
func (*ReplicaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e84aa831fb48ea1, []int{4}
}
func (m *ReplicaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaRequest.Merge(m, src)
}
func (m *ReplicaRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReplicaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaRequest proto.InternalMessageInfo

func (m *ReplicaRequest) GetReplicaIndex() int64 {
	if m != nil {
		return m.ReplicaIndex
	}
	return 0
}

func (m *ReplicaRequest) GetRecord() []byte {
	if m != nil {
		return m.Record
	}
	return nil
}

type ReplicaResponse struct {
	Database             string   `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	Shard                int32    `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Leader               int32    `protobuf:"varint,3,opt,name=leader,proto3" json:"leader,omitempty"`
	ReplicaIndex         int64    `protobuf:"varint,4,opt,name=replicaIndex,proto3" json:"replicaIndex,omitempty"`
	AckIndex             int64    `protobuf:"varint,5,opt,name=ackIndex,proto3" json:"ackIndex,omitempty"`
	ResponseTime         int64    `protobuf:"varint,6,opt,name=responseTime,proto3" json:"responseTime,omitempty"`
	Err                  string   `protobuf:"bytes,7,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplicaResponse) Reset()         { *m = ReplicaResponse{} }
func (m *ReplicaResponse) String() string { return proto.CompactTextString(m) }
func (*ReplicaResponse) ProtoMessage()    {}
func (*ReplicaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e84aa831fb48ea1, []int{5}
}
func (m *ReplicaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaResponse.Merge(m, src)
}
func (m *ReplicaResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReplicaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaResponse proto.InternalMessageInfo

func (m *ReplicaResponse) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *ReplicaResponse) GetShard() int32 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *ReplicaResponse) GetLeader() int32 {
	if m != nil {
		return m.Leader
	}
	return 0
}

func (m *ReplicaResponse) GetReplicaIndex() int64 {
	if m != nil {
		return m.ReplicaIndex
	}
	return 0
}

func (m *ReplicaResponse) GetAckIndex() int64 {
	if m != nil {
		return m.AckIndex
	}
	return 0
}

func (m *ReplicaResponse) GetResponseTime() int64 {
	if m != nil {
		return m.ResponseTime
	}
	return 0
}

func (m *ReplicaResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*ResetIndexRequest)(nil), "protoReplicaV1.ResetIndexRequest")
	proto.RegisterType((*ResetIndexResponse)(nil), "protoReplicaV1.ResetIndexResponse")
	proto.RegisterType((*GetReplicaAckIndexRequest)(nil), "protoReplicaV1.GetReplicaAckIndexRequest")
	proto.RegisterType((*GetReplicaAckIndexResponse)(nil), "protoReplicaV1.GetReplicaAckIndexResponse")
	proto.RegisterType((*ReplicaRequest)(nil), "protoReplicaV1.ReplicaRequest")
	proto.RegisterType((*ReplicaResponse)(nil), "protoReplicaV1.ReplicaResponse")
}

func init() { proto.RegisterFile("replica.proto", fileDescriptor_1e84aa831fb48ea1) }

var fileDescriptor_1e84aa831fb48ea1 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x92, 0x3f, 0x4e, 0xc3, 0x30,
	0x14, 0xc6, 0xeb, 0x96, 0xb4, 0xf0, 0x28, 0xa5, 0x58, 0x15, 0x0a, 0x19, 0x42, 0xf0, 0x14, 0x18,
	0x2a, 0xfe, 0x2c, 0xac, 0xb0, 0x20, 0x24, 0x86, 0x2a, 0x20, 0x76, 0x37, 0x79, 0x88, 0x88, 0xb6,
	0x09, 0x4e, 0x40, 0x70, 0x00, 0xee, 0xc0, 0xc6, 0xc0, 0x65, 0x18, 0xe1, 0x06, 0xa8, 0x5c, 0x04,
	0xd5, 0x76, 0xd3, 0x94, 0xd2, 0xaa, 0x03, 0x12, 0x53, 0xf2, 0x3e, 0xfb, 0xf3, 0xfb, 0xf9, 0xf9,
	0x83, 0x15, 0x81, 0x71, 0x27, 0xf4, 0x79, 0x33, 0x16, 0x51, 0x1a, 0xd1, 0x9a, 0xfc, 0x78, 0x4a,
	0xbb, 0xdc, 0x63, 0x2f, 0x04, 0xd6, 0x3c, 0x4c, 0x30, 0x3d, 0xed, 0x05, 0xf8, 0xe0, 0xe1, 0xed,
	0x1d, 0x26, 0x29, 0xb5, 0x60, 0x31, 0xe0, 0x29, 0x6f, 0xf3, 0x04, 0x4d, 0xe2, 0x10, 0x77, 0xc9,
	0xcb, 0x6a, 0xda, 0x00, 0x23, 0xb9, 0xe6, 0x22, 0x30, 0x8b, 0x0e, 0x71, 0x0d, 0x4f, 0x15, 0x74,
	0x1d, 0xca, 0x1d, 0xe4, 0x01, 0x0a, 0xb3, 0x24, 0x65, 0x5d, 0x51, 0x1b, 0xe0, 0x8a, 0x77, 0xc3,
	0xce, 0xe3, 0x45, 0xd8, 0x45, 0x73, 0xc1, 0x21, 0x6e, 0xc9, 0xcb, 0x29, 0xd4, 0x81, 0x65, 0x1e,
	0xc7, 0xd8, 0x0b, 0x64, 0x7f, 0xd3, 0x90, 0x1b, 0xf2, 0x12, 0x6b, 0x00, 0xcd, 0x03, 0x26, 0x71,
	0xd4, 0x4b, 0x90, 0x3d, 0x11, 0xd8, 0x38, 0xc1, 0x54, 0x5f, 0xe4, 0xc8, 0xbf, 0xf9, 0x1f, 0x7e,
	0x76, 0x08, 0xd6, 0x6f, 0x18, 0x8a, 0x72, 0xc0, 0xc1, 0xb5, 0xa6, 0xaf, 0x96, 0xd5, 0xec, 0x0c,
	0x6a, 0xda, 0x36, 0xa4, 0x66, 0x50, 0xd5, 0x8f, 0xa5, 0x1c, 0xaa, 0xdb, 0x98, 0x36, 0xe0, 0x14,
	0xe8, 0x47, 0x22, 0x90, 0xe7, 0x55, 0x3d, 0x5d, 0xb1, 0x0f, 0x02, 0xab, 0xd9, 0x71, 0xa3, 0xee,
	0x7f, 0x34, 0x85, 0x79, 0xc8, 0x66, 0xdc, 0x55, 0xf9, 0x15, 0x95, 0x9c, 0x63, 0x79, 0xe8, 0x1f,
	0x69, 0xb4, 0x0e, 0x25, 0x14, 0xc2, 0xac, 0x48, 0xd0, 0xc1, 0xef, 0xfe, 0x6b, 0x31, 0x1b, 0xd1,
	0x39, 0x8a, 0xfb, 0xd0, 0x47, 0xda, 0x02, 0x43, 0x86, 0x81, 0x6e, 0x35, 0xc7, 0x83, 0xdc, 0x9c,
	0x08, 0xb1, 0xc5, 0x66, 0x6d, 0xd1, 0x31, 0x2a, 0xd0, 0x2e, 0xd0, 0xc9, 0x07, 0xa4, 0xdb, 0x3f,
	0xbd, 0x53, 0xb3, 0x66, 0xed, 0xcc, 0xb3, 0x35, 0x6b, 0xd7, 0x82, 0x8a, 0x5e, 0xa4, 0xf6, 0x24,
	0x5f, 0x3e, 0x0e, 0xd6, 0xe6, 0xd4, 0xf5, 0xe1, 0x69, 0x2e, 0xd9, 0x25, 0xc7, 0xf5, 0xb7, 0xbe,
	0x4d, 0xde, 0xfb, 0x36, 0xf9, 0xec, 0xdb, 0xe4, 0xf9, 0xcb, 0x2e, 0xb4, 0xcb, 0xd2, 0x77, 0xf0,
	0x1d, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x4f, 0xf5, 0x68, 0xfb, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReplicaServiceClient is the client API for ReplicaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReplicaServiceClient interface {
	Reset(ctx context.Context, in *ResetIndexRequest, opts ...grpc.CallOption) (*ResetIndexResponse, error)
	GetReplicaAckIndex(ctx context.Context, in *GetReplicaAckIndexRequest, opts ...grpc.CallOption) (*GetReplicaAckIndexResponse, error)
	Replica(ctx context.Context, opts ...grpc.CallOption) (ReplicaService_ReplicaClient, error)
}

type replicaServiceClient struct {
	cc *grpc.ClientConn
}

func NewReplicaServiceClient(cc *grpc.ClientConn) ReplicaServiceClient {
	return &replicaServiceClient{cc}
}

func (c *replicaServiceClient) Reset(ctx context.Context, in *ResetIndexRequest, opts ...grpc.CallOption) (*ResetIndexResponse, error) {
	out := new(ResetIndexResponse)
	err := c.cc.Invoke(ctx, "/protoReplicaV1.ReplicaService/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) GetReplicaAckIndex(ctx context.Context, in *GetReplicaAckIndexRequest, opts ...grpc.CallOption) (*GetReplicaAckIndexResponse, error) {
	out := new(GetReplicaAckIndexResponse)
	err := c.cc.Invoke(ctx, "/protoReplicaV1.ReplicaService/GetReplicaAckIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaServiceClient) Replica(ctx context.Context, opts ...grpc.CallOption) (ReplicaService_ReplicaClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReplicaService_serviceDesc.Streams[0], "/protoReplicaV1.ReplicaService/Replica", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicaServiceReplicaClient{stream}
	return x, nil
}

type ReplicaService_ReplicaClient interface {
	Send(*ReplicaRequest) error
	Recv() (*ReplicaResponse, error)
	grpc.ClientStream
}

type replicaServiceReplicaClient struct {
	grpc.ClientStream
}

func (x *replicaServiceReplicaClient) Send(m *ReplicaRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *replicaServiceReplicaClient) Recv() (*ReplicaResponse, error) {
	m := new(ReplicaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReplicaServiceServer is the server API for ReplicaService service.
type ReplicaServiceServer interface {
	Reset(context.Context, *ResetIndexRequest) (*ResetIndexResponse, error)
	GetReplicaAckIndex(context.Context, *GetReplicaAckIndexRequest) (*GetReplicaAckIndexResponse, error)
	Replica(ReplicaService_ReplicaServer) error
}

// UnimplementedReplicaServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReplicaServiceServer struct {
}

func (*UnimplementedReplicaServiceServer) Reset(ctx context.Context, req *ResetIndexRequest) (*ResetIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (*UnimplementedReplicaServiceServer) GetReplicaAckIndex(ctx context.Context, req *GetReplicaAckIndexRequest) (*GetReplicaAckIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplicaAckIndex not implemented")
}
func (*UnimplementedReplicaServiceServer) Replica(srv ReplicaService_ReplicaServer) error {
	return status.Errorf(codes.Unimplemented, "method Replica not implemented")
}

func RegisterReplicaServiceServer(s *grpc.Server, srv ReplicaServiceServer) {
	s.RegisterService(&_ReplicaService_serviceDesc, srv)
}

func _ReplicaService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoReplicaV1.ReplicaService/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).Reset(ctx, req.(*ResetIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_GetReplicaAckIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplicaAckIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaServiceServer).GetReplicaAckIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoReplicaV1.ReplicaService/GetReplicaAckIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaServiceServer).GetReplicaAckIndex(ctx, req.(*GetReplicaAckIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaService_Replica_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReplicaServiceServer).Replica(&replicaServiceReplicaServer{stream})
}

type ReplicaService_ReplicaServer interface {
	Send(*ReplicaResponse) error
	Recv() (*ReplicaRequest, error)
	grpc.ServerStream
}

type replicaServiceReplicaServer struct {
	grpc.ServerStream
}

func (x *replicaServiceReplicaServer) Send(m *ReplicaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *replicaServiceReplicaServer) Recv() (*ReplicaRequest, error) {
	m := new(ReplicaRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ReplicaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoReplicaV1.ReplicaService",
	HandlerType: (*ReplicaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reset",
			Handler:    _ReplicaService_Reset_Handler,
		},
		{
			MethodName: "GetReplicaAckIndex",
			Handler:    _ReplicaService_GetReplicaAckIndex_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Replica",
			Handler:       _ReplicaService_Replica_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "replica.proto",
}

func (m *ResetIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AppendIndex != 0 {
		i = encodeVarintReplica(dAtA, i, uint64(m.AppendIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.FamilyTime != 0 {
		i = encodeVarintReplica(dAtA, i, uint64(m.FamilyTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Leader != 0 {
		i = encodeVarintReplica(dAtA, i, uint64(m.Leader))
		i--
		dAtA[i] = 0x18
	}
	if m.Shard != 0 {
		i = encodeVarintReplica(dAtA, i, uint64(m.Shard))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Database) > 0 {
		i -= len(m.Database)
		copy(dAtA[i:], m.Database)
		i = encodeVarintReplica(dAtA, i, uint64(len(m.Database)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResetIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResetIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetReplicaAckIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReplicaAckIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReplicaAckIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FamilyTime != 0 {
		i = encodeVarintReplica(dAtA, i, uint64(m.FamilyTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Leader != 0 {
		i = encodeVarintReplica(dAtA, i, uint64(m.Leader))
		i--
		dAtA[i] = 0x18
	}
	if m.Shard != 0 {
		i = encodeVarintReplica(dAtA, i, uint64(m.Shard))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Database) > 0 {
		i -= len(m.Database)
		copy(dAtA[i:], m.Database)
		i = encodeVarintReplica(dAtA, i, uint64(len(m.Database)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetReplicaAckIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReplicaAckIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReplicaAckIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AckIndex != 0 {
		i = encodeVarintReplica(dAtA, i, uint64(m.AckIndex))
		i--
		dAtA[i] = 0x28
	}
	return len(dAtA) - i, nil
}

func (m *ReplicaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Record) > 0 {
		i -= len(m.Record)
		copy(dAtA[i:], m.Record)
		i = encodeVarintReplica(dAtA, i, uint64(len(m.Record)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ReplicaIndex != 0 {
		i = encodeVarintReplica(dAtA, i, uint64(m.ReplicaIndex))
		i--
		dAtA[i] = 0x20
	}
	return len(dAtA) - i, nil
}

func (m *ReplicaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintReplica(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ResponseTime != 0 {
		i = encodeVarintReplica(dAtA, i, uint64(m.ResponseTime))
		i--
		dAtA[i] = 0x30
	}
	if m.AckIndex != 0 {
		i = encodeVarintReplica(dAtA, i, uint64(m.AckIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.ReplicaIndex != 0 {
		i = encodeVarintReplica(dAtA, i, uint64(m.ReplicaIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.Leader != 0 {
		i = encodeVarintReplica(dAtA, i, uint64(m.Leader))
		i--
		dAtA[i] = 0x18
	}
	if m.Shard != 0 {
		i = encodeVarintReplica(dAtA, i, uint64(m.Shard))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Database) > 0 {
		i -= len(m.Database)
		copy(dAtA[i:], m.Database)
		i = encodeVarintReplica(dAtA, i, uint64(len(m.Database)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintReplica(dAtA []byte, offset int, v uint64) int {
	offset -= sovReplica(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ResetIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Database)
	if l > 0 {
		n += 1 + l + sovReplica(uint64(l))
	}
	if m.Shard != 0 {
		n += 1 + sovReplica(uint64(m.Shard))
	}
	if m.Leader != 0 {
		n += 1 + sovReplica(uint64(m.Leader))
	}
	if m.FamilyTime != 0 {
		n += 1 + sovReplica(uint64(m.FamilyTime))
	}
	if m.AppendIndex != 0 {
		n += 1 + sovReplica(uint64(m.AppendIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResetIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetReplicaAckIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Database)
	if l > 0 {
		n += 1 + l + sovReplica(uint64(l))
	}
	if m.Shard != 0 {
		n += 1 + sovReplica(uint64(m.Shard))
	}
	if m.Leader != 0 {
		n += 1 + sovReplica(uint64(m.Leader))
	}
	if m.FamilyTime != 0 {
		n += 1 + sovReplica(uint64(m.FamilyTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetReplicaAckIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AckIndex != 0 {
		n += 1 + sovReplica(uint64(m.AckIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplicaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplicaIndex != 0 {
		n += 1 + sovReplica(uint64(m.ReplicaIndex))
	}
	l = len(m.Record)
	if l > 0 {
		n += 1 + l + sovReplica(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReplicaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Database)
	if l > 0 {
		n += 1 + l + sovReplica(uint64(l))
	}
	if m.Shard != 0 {
		n += 1 + sovReplica(uint64(m.Shard))
	}
	if m.Leader != 0 {
		n += 1 + sovReplica(uint64(m.Leader))
	}
	if m.ReplicaIndex != 0 {
		n += 1 + sovReplica(uint64(m.ReplicaIndex))
	}
	if m.AckIndex != 0 {
		n += 1 + sovReplica(uint64(m.AckIndex))
	}
	if m.ResponseTime != 0 {
		n += 1 + sovReplica(uint64(m.ResponseTime))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovReplica(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovReplica(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReplica(x uint64) (n int) {
	return sovReplica(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResetIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplica
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplica
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplica
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			m.Leader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leader |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyTime", wireType)
			}
			m.FamilyTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FamilyTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppendIndex", wireType)
			}
			m.AppendIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppendIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReplica(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReplica
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplica
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipReplica(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReplica
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReplicaAckIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplica
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReplicaAckIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReplicaAckIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplica
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplica
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			m.Leader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leader |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyTime", wireType)
			}
			m.FamilyTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FamilyTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReplica(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReplica
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReplicaAckIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplica
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReplicaAckIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReplicaAckIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckIndex", wireType)
			}
			m.AckIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReplica(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReplica
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplica
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaIndex", wireType)
			}
			m.ReplicaIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthReplica
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthReplica
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Record = append(m.Record[:0], dAtA[iNdEx:postIndex]...)
			if m.Record == nil {
				m.Record = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplica(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReplica
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReplica
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplica
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplica
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			m.Shard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shard |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			m.Leader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leader |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaIndex", wireType)
			}
			m.ReplicaIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckIndex", wireType)
			}
			m.AckIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTime", wireType)
			}
			m.ResponseTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReplica
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReplica
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReplica(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReplica
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReplica(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReplica
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReplica
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReplica
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReplica
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReplica
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReplica        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReplica          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReplica = fmt.Errorf("proto: unexpected end of group")
)
